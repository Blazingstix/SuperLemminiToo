/*
 * FILE MODIFIED BY RYAN SAKOWSKI
 * 
 * 
 * Copyright 2009 Volker Oth
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package lemmini.extract;

import java.awt.Toolkit;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import lemmini.LemminiFrame;
import org.apache.commons.lang3.StringUtils;

/**
 * Frame to enter source and target paths for resource extraction.
 *
 * @author Volker Oth
 */
public class FolderFrame extends javax.swing.JFrame {
    
    private static final long serialVersionUID = 0x01L;

    /** target (Lemmini resource) path for extraction */
    private String targetPath;
    /** source (WINLEMM) path for extraction */
    private String sourcePath;
    /** flag that tells whether to extract or not */
    private boolean doExtract = false;

    /**
     * Creates new form FolderFrame
     */
    public FolderFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelHeader = new javax.swing.JLabel();
        jLabelSrc = new javax.swing.JLabel();
        jTextFieldSrc = new javax.swing.JTextField();
        jButtonSrc = new javax.swing.JButton();
        jLabelTrg = new javax.swing.JLabel();
        jTextFieldTrg = new javax.swing.JTextField();
        jButtonTrg = new javax.swing.JButton();
        jButtonExtract = new javax.swing.JButton();
        jButtonQuit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SuperLemmini Resource Extractor");
        setIconImage(Toolkit.getDefaultToolkit().getImage(LemminiFrame.class.getClassLoader().getResource("icon_32.png")));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabelHeader.setText("Extract the resources from Lemmings for Windows.");

        jLabelSrc.setLabelFor(jTextFieldSrc);
        jLabelSrc.setText("Source Path (\"WINLEMM\" directory)");

        jTextFieldSrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSrcActionPerformed(evt);
            }
        });

        jButtonSrc.setText("Browse...");
        jButtonSrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSrcActionPerformed(evt);
            }
        });

        jLabelTrg.setLabelFor(jTextFieldTrg);
        jLabelTrg.setText("Target Path");

        jTextFieldTrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTrgActionPerformed(evt);
            }
        });

        jButtonTrg.setText("Browse...");
        jButtonTrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrgActionPerformed(evt);
            }
        });

        jButtonExtract.setText("Extract");
        jButtonExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExtractActionPerformed(evt);
            }
        });

        jButtonQuit.setText("Quit");
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldSrc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSrc))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelHeader)
                            .addComponent(jLabelSrc)
                            .addComponent(jLabelTrg))
                        .addGap(0, 195, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldTrg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonTrg))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonExtract)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonQuit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelHeader)
                .addGap(18, 18, 18)
                .addComponent(jLabelSrc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSrc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSrc))
                .addGap(18, 18, 18)
                .addComponent(jLabelTrg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTrg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTrg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExtract)
                    .addComponent(jButtonQuit))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        sourcePath = jTextFieldSrc.getText();
        targetPath = jTextFieldTrg.getText();
        synchronized (this) {
            notifyAll();
        }
    }//GEN-LAST:event_formWindowClosed
    
    private void jTextFieldSrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSrcActionPerformed
        sourcePath = jTextFieldSrc.getText();
    }//GEN-LAST:event_jTextFieldSrcActionPerformed

    private void jButtonSrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSrcActionPerformed
        JFileChooser jf = new JFileChooser(sourcePath);
        jf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = jf.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            sourcePath = jf.getSelectedFile().getAbsolutePath();
            jTextFieldSrc.setText(sourcePath);
        }
    }//GEN-LAST:event_jButtonSrcActionPerformed

    private void jTextFieldTrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTrgActionPerformed
        targetPath = jTextFieldTrg.getText();
    }//GEN-LAST:event_jTextFieldTrgActionPerformed

    private void jButtonTrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrgActionPerformed
        JFileChooser jf = new JFileChooser(targetPath);
        jf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = jf.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            targetPath = jf.getSelectedFile().getAbsolutePath();
            jTextFieldTrg.setText(targetPath);
        }
    }//GEN-LAST:event_jButtonTrgActionPerformed

    private void jButtonExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExtractActionPerformed
        doExtract = true;
        dispose();
    }//GEN-LAST:event_jButtonExtractActionPerformed

    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitActionPerformed
        doExtract = false;
        dispose();
    }//GEN-LAST:event_jButtonQuitActionPerformed

    /**
     * Set parameters for text edit boxes.
     * @param srcPath source (WINLEMM) path for extraction
     * @param trgPath target (Lemmini resource) path for extraction
     */
    public void setParameters(final Path srcPath, final Path trgPath) {
        sourcePath = srcPath.toString();
        jTextFieldSrc.setText(sourcePath);
        targetPath = trgPath.toString();
        jTextFieldTrg.setText(targetPath);
    }

    /**
     * Get target (Lemmini resource) path for extraction.
     * @return target (Lemmini resource) path for extraction
     */
    public Path getTarget() {
        if (targetPath != null) {
            return Paths.get(targetPath);
        } else {
            return Paths.get(StringUtils.EMPTY);
        }
    }

    /**
     * Get source (WINLEMM) path for extraction.
     * @return source (WINLEMM) path for extraction
     */
    public Path getSource() {
        if (sourcePath != null) {
            return Paths.get(sourcePath);
        } else {
            return Paths.get(StringUtils.EMPTY);
        }
    }

    /**
     * Get extraction selection status.
     * @return true if extraction was chosen, false otherwise
     */
    public boolean getSuccess() {
        return doExtract;
    }
    
    /**
     * Blocks until the window is closed. If this window is already closed,
     * then this method returns immediately.
     */
    public synchronized void waitUntilClosed() {
        while (isVisible()) {
            try {
                wait();
            } catch (InterruptedException ex) {
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExtract;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JButton jButtonSrc;
    private javax.swing.JButton jButtonTrg;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelSrc;
    private javax.swing.JLabel jLabelTrg;
    private javax.swing.JTextField jTextFieldSrc;
    private javax.swing.JTextField jTextFieldTrg;
    // End of variables declaration//GEN-END:variables
}
